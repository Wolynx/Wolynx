//Kodlar olabildiğince optimize edilmiştir. Daha kısa kod önerileriniz için her zaman açığım. Eklenmesi uygun olan her türlü fikirlerinizi belirtmenizi isterim.

#include <Arduino.h>
#include <U8g2lib.h>
#include <Wire.h>
#include <DHT.h>
#include <ESP32Servo.h>

U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0);

#define DHTPIN 23
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

Servo myServo;
int servoPos = 90;
const int SERVO_PIN = 13;
bool servoActive = false;

#define UP_BUTTON 18
#define DOWN_BUTTON 19
#define RIGHT_BUTTON 5
#define LEFT_BUTTON 4
#define SELECT_BUTTON 15
#define BUZZER_PIN 16

int menuIndex = 0;
String menuItems[] = {"Yilan Oyunu", "Servo", "Hava Durumu", "Refleks Oyunu", "Tus Kalibrasyonu","Hesap Makinesi","Zamanlayici"};
const int menuLength = sizeof(menuItems) / sizeof(menuItems[0]);
int menuOffset = 0;

const int SCREEN_WIDTH = 128;
const int SCREEN_HEIGHT = 64;
const int GAME_AREA_X = 4;
const int GAME_AREA_Y = 14;
const int GAME_WIDTH = 120;
const int GAME_HEIGHT = 46;
const int GRID_SIZE = 4;
const int GRID_WIDTH = GAME_WIDTH / GRID_SIZE;
const int GRID_HEIGHT = GAME_HEIGHT / GRID_SIZE;

enum Direction { UP, DOWN, LEFT, RIGHT };
Direction dir = RIGHT;

struct Point { int x; int y; };
#define MAX_LENGTH 100
Point snake[MAX_LENGTH];
int snakeLength = 3;
Point food;
bool gameOver = false;
bool inGame = false;
unsigned long lastUpdate = 0;
const int UPDATE_INTERVAL = 150;
int score = 0, maxScore = 0;

unsigned long reflexStartTime = 0;
unsigned long reflexLastUpdate = 0;
bool reflexGameActive = false;
Direction reflexDirection;
int reflexScore = 0;
unsigned long bestReaction = 9999;
unsigned long totalReaction = 0;
int reactionCount = 0;

template <typename T> void centerText(T text, int y) {
  int w = u8g2.getStrWidth(String(text).c_str());
  u8g2.setCursor((128 - w) / 2, y);
  u8g2.print(text);
}

void playTone(int freq, int duration) {
  tone(BUZZER_PIN, freq);
  delay(duration);
  noTone(BUZZER_PIN);
}

void drawMenu() {
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_6x10_tr);
  centerText("- Ana Menu -", 10);
  const int visibleItems = 4;
  if (menuIndex < menuOffset) menuOffset = menuIndex;
  else if (menuIndex >= menuOffset + visibleItems) menuOffset = menuIndex - visibleItems + 1;
  for (int i = 0; i < visibleItems; i++) {
    int itemIndex = menuOffset + i;
    if (itemIndex >= menuLength) break;
    if (itemIndex == menuIndex) u8g2.drawBox(0, 14 + i * 12, 128, 12);
    u8g2.setDrawColor(itemIndex == menuIndex ? 0 : 1);
    u8g2.drawStr(10, 24 + i * 12, menuItems[itemIndex].c_str());
    u8g2.setDrawColor(1);
  }
  u8g2.sendBuffer();
}

void drawServo() {
  if (!servoActive) {
    myServo.attach(SERVO_PIN);
    servoActive = true;
  }
  servoPos = 90;
  myServo.write(servoPos);
  delay(300);

  while (digitalRead(SELECT_BUTTON) != LOW) {
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_6x10_tr);
    centerText("Servo Kontrol", 10);
    if (digitalRead(LEFT_BUTTON) == LOW && servoPos > 0) {
      servoPos -= 5; myServo.write(servoPos); delay(50);
    }
    if (digitalRead(RIGHT_BUTTON) == LOW && servoPos < 180) {
      servoPos += 5; myServo.write(servoPos); delay(50);
    }
    int barLength = map(servoPos, 0, 180, 0, 100);
    u8g2.drawFrame(14, 30, 100, 10);
    u8g2.drawBox(14, 30, barLength, 10);
    u8g2.setCursor(40, 55); u8g2.print("Aci: "); u8g2.print(servoPos);
    u8g2.sendBuffer();
  }
  delay(300);
}

void drawWeather() {
  float temp = dht.readTemperature();
  float hum = dht.readHumidity();

  while (digitalRead(LEFT_BUTTON) != LOW) {
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_6x10_tr);
    centerText("Hava Durumu", 15);
    u8g2.setCursor(10, 35); u8g2.print("Sicaklik: "); u8g2.print(temp); u8g2.print(" C");
    u8g2.setCursor(10, 50); u8g2.print("Nem: "); u8g2.print(hum); u8g2.print(" %");
    u8g2.sendBuffer(); delay(200);
  }
  delay(300);
}

void resetGame() {
  snakeLength = 3;
  for (int i = 0; i < snakeLength; i++) {
    snake[i].x = 10 - i;
    snake[i].y = 5;
  }
  dir = RIGHT;
  score = 0;
  gameOver = false;
  food.x = random(0, GRID_WIDTH);
  food.y = random(0, GRID_HEIGHT);
}

void runSnakeGame() {
  if (!gameOver) {
    if (digitalRead(UP_BUTTON) == LOW && dir != DOWN) dir = UP;
    else if (digitalRead(DOWN_BUTTON) == LOW && dir != UP) dir = DOWN;
    else if (digitalRead(RIGHT_BUTTON) == LOW && dir != LEFT) dir = RIGHT;
    else if (digitalRead(LEFT_BUTTON) == LOW && dir != RIGHT) dir = LEFT;

    if (millis() - lastUpdate > UPDATE_INTERVAL) {
      Point newHead = snake[0];
      switch (dir) {
        case UP: newHead.y--; break;
        case DOWN: newHead.y++; break;
        case LEFT: newHead.x--; break;
        case RIGHT: newHead.x++; break;
      }
      if (newHead.x < 0 || newHead.x >= GRID_WIDTH || newHead.y < 0 || newHead.y >= GRID_HEIGHT) {
        playTone(150, 300); gameOver = true; return;
      }
      for (int i = 0; i < snakeLength; i++) {
        if (snake[i].x == newHead.x && snake[i].y == newHead.y) {
          playTone(150, 300); gameOver = true; return;
        }
      }
      for (int i = snakeLength; i > 0; i--) snake[i] = snake[i - 1];
      snake[0] = newHead;
      if (newHead.x == food.x && newHead.y == food.y) {
        snakeLength++; score++;
        if (score > maxScore) maxScore = score;
        food.x = random(0, GRID_WIDTH);
        food.y = random(0, GRID_HEIGHT);
        playTone(1000, 100);
      }
      lastUpdate = millis();
    }
    u8g2.clearBuffer();
    u8g2.drawFrame(GAME_AREA_X, GAME_AREA_Y, GAME_WIDTH, GAME_HEIGHT);
    for (int i = 0; i < snakeLength; i++) {
      int px = GAME_AREA_X + snake[i].x * GRID_SIZE;
      int py = GAME_AREA_Y + snake[i].y * GRID_SIZE;
      u8g2.drawBox(px, py, GRID_SIZE, GRID_SIZE);
    }
    int fx = GAME_AREA_X + food.x * GRID_SIZE;
    int fy = GAME_AREA_Y + food.y * GRID_SIZE;
    u8g2.drawFrame(fx, fy, GRID_SIZE, GRID_SIZE);
    u8g2.setFont(u8g2_font_5x7_tr);
    u8g2.setCursor(2, 10); u8g2.print("Skor: "); u8g2.print(score);
    u8g2.setCursor(64, 10); u8g2.print("Maks: "); u8g2.print(maxScore);
    u8g2.sendBuffer();
  } else {
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    centerText("Oyun Bitti!", 25);
    u8g2.setFont(u8g2_font_6x10_tr);
    centerText("Skor: " + String(score), 45);
    centerText("Cikmak icin SEC", 60);
    u8g2.sendBuffer();
    if (digitalRead(SELECT_BUTTON) == LOW) {
      delay(300); inGame = false;
    }
  }
}

void runReflexGame() {
  reflexScore = 0;
  reflexStartTime = millis();
  reflexLastUpdate = 0;
  reflexGameActive = true;
  reflexDirection = (Direction)random(0, 4);
  unsigned long bestReaction = 9999;
  unsigned long promptTime = millis();

  while (reflexGameActive) {
    unsigned long now = millis();
    unsigned long elapsed = (now - reflexStartTime) / 1000;
    unsigned long remaining = 30 - elapsed;
    if (remaining == 0) break;

    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_6x10_tr);
    centerText("Refleks Yonu", 10);
    switch (reflexDirection) {
      case UP: centerText("YUKARI", 30); break;
      case DOWN: centerText("ASAGI", 30); break;
      case LEFT: centerText("SOL", 30); break;
      case RIGHT: centerText("SAG", 30); break;
    }
    u8g2.setCursor(0, 60);
    u8g2.print("Sure: "); u8g2.print(remaining);
    u8g2.setCursor(80, 60);
    u8g2.print("Skor: "); u8g2.print(reflexScore);
    u8g2.sendBuffer();

    if (digitalRead(UP_BUTTON) == LOW ||
        digitalRead(DOWN_BUTTON) == LOW ||
        digitalRead(LEFT_BUTTON) == LOW ||
        digitalRead(RIGHT_BUTTON) == LOW) {
      bool correct = false;
      if (digitalRead(UP_BUTTON) == LOW && reflexDirection == UP) correct = true;
      if (digitalRead(DOWN_BUTTON) == LOW && reflexDirection == DOWN) correct = true;
      if (digitalRead(LEFT_BUTTON) == LOW && reflexDirection == LEFT) correct = true;
      if (digitalRead(RIGHT_BUTTON) == LOW && reflexDirection == RIGHT) correct = true;

      if (correct) {
        unsigned long reaction = now - promptTime;
        if (reaction < bestReaction) bestReaction = reaction;
        reflexScore++;
        reflexDirection = (Direction)random(0, 4);
        promptTime = millis();
        delay(250);
      } else {
        playTone(200, 200);
        break; // Yanlışsa bitir
      }
    }
  }

  // Sonuç ekranı
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_ncenB08_tr);
  centerText("Oyun Bitti!", 20);
  u8g2.setFont(u8g2_font_6x10_tr);
  centerText("Skor: " + String(reflexScore), 38);
  if (reflexScore > 0)
    centerText("En Hizli: " + String(bestReaction) + " ms", 50);
  centerText("Geri Donmek icin SEC", 62);
  u8g2.sendBuffer();

  while (digitalRead(SELECT_BUTTON) != LOW) delay(100);
  delay(300);
}


void drawButtonTest() {
  while (digitalRead(SELECT_BUTTON) != LOW) {
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_6x10_tr);
    u8g2.drawStr(10, 10, "Tus Kalibrasyonu");
    u8g2.drawStr(10, 25, digitalRead(UP_BUTTON) == LOW ? "YUKARI: BASILI" : "YUKARI: BOS");
    u8g2.drawStr(10, 35, digitalRead(DOWN_BUTTON) == LOW ? "ASAGI: BASILI" : "ASAGI: BOS");
    u8g2.drawStr(10, 45, digitalRead(LEFT_BUTTON) == LOW ? "SOL: BASILI" : "SOL: BOS");
    u8g2.drawStr(10, 55, digitalRead(RIGHT_BUTTON) == LOW ? "SAG: BASILI" : "SAG: BOS");
    u8g2.sendBuffer();
    delay(150);
  }
  delay(300);
}

int evaluateExpression(String expr) {
  const int MAX = 20;
  int numbers[MAX];
  char operators[MAX];
  int numIndex = 0, opIndex = 0;

  int currentNumber = 0;
  bool readingNumber = false;

  for (int i = 0; i < expr.length(); i++) {
    char c = expr.charAt(i);

    if (isDigit(c)) {
      currentNumber = currentNumber * 10 + (c - '0');
      readingNumber = true;
    } else if (c == '+' || c == '-' || c == '*' || c == '/') {
      if (readingNumber) {
        numbers[numIndex++] = currentNumber;
        currentNumber = 0;
        readingNumber = false;
      }
      operators[opIndex++] = c;
    }
  }

  if (readingNumber) {
    numbers[numIndex++] = currentNumber;
  }

  // Önce * ve / işlemleri yapılır
  for (int i = 0; i < opIndex; i++) {
    if (operators[i] == '*' || operators[i] == '/') {
      int a = numbers[i];
      int b = numbers[i + 1];
      int res = (operators[i] == '*') ? a * b : (b != 0 ? a / b : 0);

      numbers[i] = res;

      // Sağdaki sayıyı sola kaydır
      for (int j = i + 1; j < numIndex - 1; j++) {
        numbers[j] = numbers[j + 1];
      }
      numIndex--;

      // Operatörü kaydır
      for (int j = i; j < opIndex - 1; j++) {
        operators[j] = operators[j + 1];
      }
      opIndex--;
      i--; // Aynı indeks tekrar işlenmeli
    }
  }

  // Şimdi + ve - işlemleri
  int result = numbers[0];
  for (int i = 0; i < opIndex; i++) {
    if (operators[i] == '+') result += numbers[i + 1];
    else if (operators[i] == '-') result -= numbers[i + 1];
  }

  return result;
}




void runCalculator() {
  const char* keys[4][4] = {
    {"7", "8", "9", "/"},
    {"4", "5", "6", "*"},
    {"1", "2", "3", "-"},
    {"0", "C", "=", "+"}
  };

  int cursorX = 0, cursorY = 0;
  String expression = "";
  String result = "";
  bool calculated = false;

  while (true) {
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_6x10_tr); // Küçük ama okunabilir font

    // Hesap satırı (en üstte)
    u8g2.setCursor(2, 10);
    if (calculated) {
      u8g2.print(expression + " = " + result);
    } else {
      u8g2.print(expression);
    }

    // Tuş çizimi (4x4 grid)
    for (int y = 0; y < 4; y++) {
      for (int x = 0; x < 4; x++) {
        int boxW = 27, boxH = 12;
        int bx = 2 + x * 31;
        int by = 16 + y * 12;

        if (cursorX == x && cursorY == y) {
          u8g2.drawBox(bx, by, boxW, boxH); // Seçili tuş dolu kutu
          u8g2.setDrawColor(0);
          u8g2.setCursor(bx + 9, by + 9);
          u8g2.print(keys[y][x]);
          u8g2.setDrawColor(1);
        } else {
          u8g2.drawFrame(bx, by, boxW, boxH);
          u8g2.setCursor(bx + 9, by + 9);
          u8g2.print(keys[y][x]);
        }
      }
    }

    u8g2.sendBuffer();

    // Kontroller
    if (digitalRead(UP_BUTTON) == LOW) {
      cursorY = (cursorY - 1 + 4) % 4;
      delay(200);
    } else if (digitalRead(DOWN_BUTTON) == LOW) {
      cursorY = (cursorY + 1) % 4;
      delay(200);
    } else if (digitalRead(LEFT_BUTTON) == LOW) {
      cursorX = (cursorX - 1 + 4) % 4;
      delay(200);
    } else if (digitalRead(RIGHT_BUTTON) == LOW) {
      cursorX = (cursorX + 1) % 4;
      delay(200);
    } else if (digitalRead(SELECT_BUTTON) == LOW) {
      String key = keys[cursorY][cursorX];

      if (key == "C") {
        expression = "";
        result = "";
        calculated = false;
      } else if (key == "=") {
        result = String(evaluateExpression(expression));
        calculated = true;
      } else {
        if (calculated) {
          expression = "";
          result = "";
          calculated = false;
        }
        expression += key;
      }

      delay(300);
    }

    // Menüye dön: sol ve sağ tuşa birlikte basılırsa
    if (digitalRead(LEFT_BUTTON) == LOW && digitalRead(RIGHT_BUTTON) == LOW) {
      delay(300);
      break;
    }

    delay(50);
  }
}

// --- Zamanlayıcı için değişkenler ---
bool timerSetting = true;    // Ayarlama modunda mı?
bool timerRunning = false;   // Sayaç çalışıyor mu?
int timerMinutes = 0;
int timerSeconds = 0;
unsigned long timerStartMillis = 0;
unsigned long timerDuration = 0;

#define BUZZER_PIN 16  // Senin buzzer pinini yaz

void timerSetup() {
  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(BUZZER_PIN, LOW);
}

void timerLoop() {
  if (timerSetting) {
    // Zaman ayarlama ekranı
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.drawStr(10, 15, "Zamani Ayarla:");

    char timeStr[10];
    sprintf(timeStr, "%02d:%02d", timerMinutes, timerSeconds);
    u8g2.setCursor(40, 40);
    u8g2.print(timeStr);

    u8g2.setFont(u8g2_font_6x10_tr);
    u8g2.drawStr(10, 55, "UP/DOWN: Degistir");
    u8g2.drawStr(10, 63, "LEFT: Baslat");

    u8g2.sendBuffer();

    if (digitalRead(UP_BUTTON) == LOW) {
      timerSeconds++;
      if (timerSeconds > 59) {
        timerSeconds = 0;
        timerMinutes++;
        if (timerMinutes > 99) timerMinutes = 0;
      }
      delay(200);
    } 
    else if (digitalRead(DOWN_BUTTON) == LOW) {
      if (timerSeconds == 0) {
        if (timerMinutes > 0) timerMinutes--;
        timerSeconds = 59;
      } else {
        timerSeconds--;
      }
      delay(200);
    } 
    else if (digitalRead(LEFT_BUTTON) == LOW) {
      if (timerMinutes != 0 || timerSeconds != 0) {
        timerDuration = (timerMinutes * 60UL + timerSeconds) * 1000UL;
        timerStartMillis = millis();
        timerSetting = false;
        timerRunning = true;
      }
      delay(300);
    }
  } 
  else if (timerRunning) {
    unsigned long elapsed = millis() - timerStartMillis;
    if (elapsed >= timerDuration) {
      timerRunning = false;
      // Alarm sesi
      for (int i=0; i<5; i++) {
        tone(BUZZER_PIN, 2000, 200);
        delay(300);
      }
    } else {
      unsigned long remaining = (timerDuration - elapsed) / 1000;
      int remMin = remaining / 60;
      int remSec = remaining % 60;

      u8g2.clearBuffer();
      u8g2.setFont(u8g2_font_ncenB08_tr);
      u8g2.drawStr(10, 15, "Zamanlayici Basladi:");
      char timeStr[10];
      sprintf(timeStr, "%02d:%02d", remMin, remSec);
      u8g2.setCursor(40, 40);
      u8g2.print(timeStr);

      u8g2.setFont(u8g2_font_6x10_tr);
      u8g2.drawStr(10, 55, "LEFT: Durdur");
      u8g2.sendBuffer();

      if (digitalRead(LEFT_BUTTON) == LOW) {
        timerRunning = false;
        timerSetting = true;
        delay(300);
      }
    }
  } 
  else {
    // Timer durduğunda (alarm sonrası)
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    centerText("Zaman Doldu", 32);
    centerText("LEFT: Tekrar Ayarla", 50);
    u8g2.sendBuffer();

    if (digitalRead(LEFT_BUTTON) == LOW) {
      timerSetting = true;
      timerMinutes = 0;
      timerSeconds = 0;
      delay(300);
    }
  }
}



void setup() {
  Serial.begin(115200);
  u8g2.begin();
  dht.begin();

  pinMode(UP_BUTTON, INPUT_PULLUP);
  pinMode(DOWN_BUTTON, INPUT_PULLUP);
  pinMode(LEFT_BUTTON, INPUT_PULLUP);
  pinMode(RIGHT_BUTTON, INPUT_PULLUP);
  pinMode(SELECT_BUTTON, INPUT_PULLUP);
  pinMode(BUZZER_PIN, OUTPUT);

  myServo.detach();
  servoActive = false;

  randomSeed(analogRead(0));

  drawMenu();
}


void loop() {
  if (inGame) {
    runSnakeGame();
    return;
  }

  if (reflexGameActive) {
    runReflexGame();
    reflexGameActive = false;
    drawMenu();
    return;
  }

  // Menü navigasyonu
  if (digitalRead(UP_BUTTON) == LOW) {
    menuIndex = (menuIndex - 1 + menuLength) % menuLength;
    drawMenu();
    delay(150);
  } else if (digitalRead(DOWN_BUTTON) == LOW) {
    menuIndex = (menuIndex + 1) % menuLength;
    drawMenu();
    delay(150);
  } else if (digitalRead(SELECT_BUTTON) == LOW) {
    delay(150);
    switch (menuIndex) {
      case 0:
        resetGame();
        inGame = true;
        break;
      case 1:
        drawServo();
        drawMenu();
        break;
      case 2:
        drawWeather();
        drawMenu();
        break;
      case 3:
        runReflexGame();
        drawMenu();
        break;
      case 4:
        drawButtonTest();
        drawMenu();
        break;
      case 5:
        runCalculator();
        drawMenu();
        break;
      case 6:
        timerSetup();
        while (true) {
          timerLoop();
          if (digitalRead(LEFT_BUTTON) == LOW && digitalRead(RIGHT_BUTTON) == LOW) {
            delay(300);
            break; // Menüye dön
          }
          delay(50);
        }
        drawMenu();
        break;
    }
  }

  delay(50);
}
